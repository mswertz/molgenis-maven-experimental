/* File:        observ/model/JDBCDatabase
 * Copyright:   Inventory 2000-2012, GBIC 2002-2012, all rights reserved
 * Date:        October 11, 2012
 * 
 * generator:   org.molgenis.generators.db.JDBCMetaDatabaseGen 4.0.0-testing
 *
 * THIS FILE HAS BEEN GENERATED, PLEASE DO NOT EDIT!
 */
package app;

import java.util.Arrays;
import java.util.Vector;

import org.molgenis.framework.db.DatabaseException;
import org.molgenis.MolgenisFieldTypes;
import org.molgenis.model.elements.Entity;
import org.molgenis.model.elements.Model;
import org.molgenis.model.elements.Field;
import org.molgenis.model.MolgenisModelException;
import org.molgenis.model.MolgenisModelValidator;
import org.molgenis.MolgenisOptions;

/**
 * This class is an in memory representation of the contents of your *_db.xml file
 * Utility of this class is to allow for dynamic querying and/or user interfacing
 * for example within a query tool or a security module.
 */
public class JDBCMetaDatabase extends Model
{
	public JDBCMetaDatabase() throws DatabaseException
	{
		super("observ");
		try
		{
			//Identifiable
			Entity identifiable_entity = new Entity("Identifiable",this.getDatabase());
			identifiable_entity.setSystem(true);
			identifiable_entity.setAbstract(true);
			identifiable_entity.setDescription("This interface assigns an automatic 'id' field to every\n\t\t\t\tobject.\n");
			identifiable_entity.setXrefLabels(Arrays.asList(new String[]{"id"}));
			Field identifiable_id_field = new Field(identifiable_entity, "id", MolgenisFieldTypes.getType("int"));
			identifiable_id_field.setAuto(true);
			identifiable_id_field.setDescription("automatically generated id");
			identifiable_id_field.setNillable(false);
			identifiable_entity.addField(identifiable_id_field);
			identifiable_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			
			//Nameable
			Entity nameable_entity = new Entity("Nameable",this.getDatabase());
			nameable_entity.setSystem(false);
			nameable_entity.setAbstract(true);
			nameable_entity.setImplements(new String[]{"Identifiable"});
			nameable_entity.setDescription("This interface extends Identifiable with a unique 'name'\n\t\t\t\tfield. The name length can be stored in one byte. (Java has signed\n\t\t\t\tintegers) The name is by itself not unique, this should be enforced\n\t\t\t\twithin a certain context. For example, unique(name, study) to make\n\t\t\t\tthe name unique within one single study. The NameableDecorator\n\t\t\t\tensures that names don't lead to problems in R and other script\n\t\t\t\tenvironments.\n");
			nameable_entity.setXrefLabels(Arrays.asList(new String[]{"id"}));
			Field nameable_name_field = new Field(nameable_entity, "name", MolgenisFieldTypes.getType("string"));
			nameable_name_field.setDescription("human-readable name.");
			nameable_name_field.setNillable(false);
			nameable_entity.addField(nameable_name_field);
			Field nameable_id_field = new Field(nameable_entity, "id", MolgenisFieldTypes.getType("int"));
			nameable_id_field.setAuto(true);
			nameable_id_field.setDescription("automatically generated id");
			nameable_id_field.setNillable(false);
			nameable_entity.addField(nameable_id_field);
			nameable_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			
			//Describable
			Entity describable_entity = new Entity("Describable",this.getDatabase());
			describable_entity.setSystem(true);
			describable_entity.setAbstract(true);
			describable_entity.setDescription("This interface adds a description field to all entities\n\t\t\t\tthe implement it.\n");
			Field describable_description_field = new Field(describable_entity, "description", MolgenisFieldTypes.getType("text"));
			describable_description_field.setDescription("description field");
			describable_description_field.setNillable(true);
			describable_entity.addField(describable_description_field);
			
			//Ontology
			Entity ontology_entity = new Entity("Ontology",this.getDatabase());
			ontology_entity.setSystem(false);
			ontology_entity.setAbstract(false);
			ontology_entity.setImplements(new String[]{"Nameable"});
			ontology_entity.setDescription(" Ontology defines a reference to a an ontology or\n\t\t\t\tcontrolled vocabulary from which well-defined and stable (ontology)\n\t\t\t\tterms can be obtained. Each Ontology should have a unique name, for\n\t\t\t\tinstance: Gene Ontology, Mammalian Phenotype, Human Phenotype\n\t\t\t\tOntology, Unified Medical Language System, Medical Subject Headings,\n\t\t\t\tetc. Also a abbreviation is required, for instance: GO, MP, HPO,\n\t\t\t\tUMLS, MeSH, etc. Use of existing ontologies/vocabularies is\n\t\t\t\trecommended to harmonize phenotypic feature and value descriptions.\n\t\t\t\tBut one can also create a 'local' Ontology. The Ontology class maps\n\t\t\t\tto FuGE::Ontology, MAGE-TAB::TermSourceREF.\n");
			ontology_entity.setXrefLabels(Arrays.asList(new String[]{"name"}));
			Field ontology_ontologyAccession_field = new Field(ontology_entity, "ontologyAccession", MolgenisFieldTypes.getType("string"));
			ontology_ontologyAccession_field.setDescription("A identifier that uniquely identifies the ontology (typically an acronym). E.g. GO, MeSH, HPO.");
			ontology_ontologyAccession_field.setNillable(true);
			ontology_entity.addField(ontology_ontologyAccession_field);
			Field ontology_ontologyURI_field = new Field(ontology_entity, "ontologyURI", MolgenisFieldTypes.getType("hyperlink"));
			ontology_ontologyURI_field.setDescription("(Optional) A URI that references the location of the ontology.");
			ontology_ontologyURI_field.setNillable(true);
			ontology_entity.addField(ontology_ontologyURI_field);
			Field ontology_name_field = new Field(ontology_entity, "name", MolgenisFieldTypes.getType("string"));
			ontology_name_field.setDescription("human-readable name.");
			ontology_name_field.setNillable(false);
			ontology_entity.addField(ontology_name_field);
			Field ontology_id_field = new Field(ontology_entity, "id", MolgenisFieldTypes.getType("int"));
			ontology_id_field.setAuto(true);
			ontology_id_field.setDescription("automatically generated id");
			ontology_id_field.setNillable(false);
			ontology_entity.addField(ontology_id_field);
			ontology_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			ontology_entity.addKey(Arrays.asList(new String[]{"name"}),false,"");
			
			//Species
			Entity species_entity = new Entity("Species",this.getDatabase());
			species_entity.setSystem(false);
			species_entity.setAbstract(false);
			species_entity.setParents(new String[]{"OntologyTerm"});
			species_entity.setDescription("Ontology terms for species. E.g. Arabidopsis thaliana.\n\t\t\t\tDISCUSSION: should we avoid subclasses of OntologyTerm and instead\n\t\t\t\tmake a 'tag' filter on terms so we can make pulldowns context\n\t\t\t\tdependent (e.g. to only show particular subqueries of ontologies).\n\t\t\t\n");
			species_entity.setXrefLabels(Arrays.asList(new String[]{"name"}));
			Field species_id_field = new Field(species_entity, "id", MolgenisFieldTypes.getType("int"));
			species_id_field.setAuto(true);
			species_id_field.setDescription("automatically generated id");
			species_id_field.setNillable(false);
			species_entity.addField(species_id_field);
			species_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			
			//AlternateId
			Entity alternateId_entity = new Entity("AlternateId",this.getDatabase());
			alternateId_entity.setSystem(false);
			alternateId_entity.setAbstract(false);
			alternateId_entity.setParents(new String[]{"OntologyTerm"});
			alternateId_entity.setDescription("\n\t\t\t\tAn external identifier for an annotation. For example: name='R13H8.1', ontology='ensembl' or name='WBgene00000912', ontology='wormbase'.\n\t\t\t\n");
			alternateId_entity.setXrefLabels(Arrays.asList(new String[]{"name"}));
			Field alternateId_id_field = new Field(alternateId_entity, "id", MolgenisFieldTypes.getType("int"));
			alternateId_id_field.setAuto(true);
			alternateId_id_field.setDescription("automatically generated id");
			alternateId_id_field.setNillable(false);
			alternateId_entity.addField(alternateId_id_field);
			alternateId_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			
			//OntologyTerm
			Entity ontologyTerm_entity = new Entity("OntologyTerm",this.getDatabase());
			ontologyTerm_entity.setSystem(false);
			ontologyTerm_entity.setAbstract(false);
			ontologyTerm_entity.setImplements(new String[]{"Nameable"});
			ontologyTerm_entity.setDescription("\n\t\t\t\tOntologyTerm defines a single entry (term) from an ontology or a\n\t\t\t\tcontrolled vocabulary (defined by Ontology). The name is the\n\t\t\t\tontology term which is unique within an ontology source, such as\n\t\t\t\t[examples here]. Other data entities can reference to this\n\t\t\t\tOntologyTerm to harmonize naming of concepts. Each term should have\n\t\t\t\ta local, unique label within the Investigation. If no suitable\n\t\t\t\tontology term exists then one can define new terms locally (in which\n\t\t\t\tcase there is no formal accession for the term limiting its use for\n\t\t\t\tcross-Investigation queries). In those cases the local name should\n\t\t\t\tbe repeated in both term and termAccession. Maps to\n\t\t\t\tFuGE::OntologyIndividual; in MAGE-TAB there is no separate entity to\n\t\t\t\tmodel terms.\n\t\t\t\t<br/>\n\t\t\t\tOptionally a local controlled vocabulary or ontology can be defined,\n\t\t\t\tfor example to represent 'Codelists' often used in questionaires.\n\t\t\t\tNote: this is not a InvestigationElement because of the additional\n\t\t\t\txref_label and unique constraint.This class defines a single entry\n\t\t\t\tfrom an ontology or a controlled vocabulary.\n\t\t\t\t<br/>\n\t\t\t\tIf it is a simple controlled vocabulary, there may be no formal\n\t\t\t\taccession for the term. In these cases the local name should be\n\t\t\t\trepeated in both term and termAccession. If the term has a value,\n\t\t\t\tthe OntologyTerm will have a single DataProperty whose value was the\n\t\t\t\tvalue for the property. For instance, for an OntologyIndividual\n\t\t\t\tbased on the MO ontology the attributes might be: The term would be\n\t\t\t\twhat is usually called the local name in the Ontology, for instance\n\t\t\t\t'Age'; The termAccession could be\n\t\t\t\t'http://mged.sourceforge.net/ontologies/MGEDOntology.owl#Age' or a\n\t\t\t\tan arbitrary accession if one exists; The identifier is a unique\n\t\t\t\tidentifier for individuals in the scope of the FuGE instance; The\n\t\t\t\tinherited name attribute should not be used; The ontologyURI of\n\t\t\t\tOntologySource could be\n\t\t\t\t'http://mged.sourceforge.net/ontologies/MGEDOntology.owl\". The\n\t\t\t\tOntologyTerm subclasses are instances of Ontology classes and\n\t\t\t\tproperties, not the actual terms themselves. An OntologyIndividual,\n\t\t\t\tif based on an existing Ontology, can be considered a statement that\n\t\t\t\tcan be validated against the referenced ontology. The subclasses and\n\t\t\t\ttheir associations are based on the Ontology Definition Model,\n\t\t\t\tad/2005-04-13, submitted to the OMG as a response to RFP\n\t\t\t\tad/2003-03-40, Copyright 2005 DSTC Pty Ltd. Copyright 2005 IBM\n\t\t\t\tCopyright 2005 Sandpiper Software, Inc under the standard OMG\n\t\t\t\tlicense terms. \n\t\t\t\n");
			ontologyTerm_entity.setXrefLabels(Arrays.asList(new String[]{"name"}));
			Field ontologyTerm_ontology_field = new Field(ontologyTerm_entity, "ontology", MolgenisFieldTypes.getType("xref"));
			ontologyTerm_ontology_field.setDescription("(Optional) The source ontology or controlled vocabulary list that ontology terms have been obtained from.");
			ontologyTerm_ontology_field.setNillable(true);
			ontologyTerm_ontology_field.setXRefVariables("Ontology", "id",Arrays.asList(new String[]{"name"}));
			ontologyTerm_entity.addField(ontologyTerm_ontology_field);
			Field ontologyTerm_termAccession_field = new Field(ontologyTerm_entity, "termAccession", MolgenisFieldTypes.getType("string"));
			ontologyTerm_termAccession_field.setDescription("(Optional) The accession number assigned to the ontology term in its source ontology. If empty it is assumed to be a locally defined term.");
			ontologyTerm_termAccession_field.setNillable(true);
			ontologyTerm_entity.addField(ontologyTerm_termAccession_field);
			Field ontologyTerm_definition_field = new Field(ontologyTerm_entity, "definition", MolgenisFieldTypes.getType("string"));
			ontologyTerm_definition_field.setDescription("(Optional) The definition of the term.");
			ontologyTerm_definition_field.setNillable(true);
			ontologyTerm_entity.addField(ontologyTerm_definition_field);
			Field ontologyTerm_termPath_field = new Field(ontologyTerm_entity, "termPath", MolgenisFieldTypes.getType("string"));
			ontologyTerm_termPath_field.setDescription("EXTENSION. The Ontology Lookup Service path that contains this term.");
			ontologyTerm_termPath_field.setNillable(true);
			ontologyTerm_entity.addField(ontologyTerm_termPath_field);
			Field ontologyTerm_name_field = new Field(ontologyTerm_entity, "name", MolgenisFieldTypes.getType("string"));
			ontologyTerm_name_field.setDescription("human-readable name.");
			ontologyTerm_name_field.setNillable(false);
			ontologyTerm_entity.addField(ontologyTerm_name_field);
			Field ontologyTerm_id_field = new Field(ontologyTerm_entity, "id", MolgenisFieldTypes.getType("int"));
			ontologyTerm_id_field.setAuto(true);
			ontologyTerm_id_field.setDescription("automatically generated id");
			ontologyTerm_id_field.setNillable(false);
			ontologyTerm_entity.addField(ontologyTerm_id_field);
			ontologyTerm_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			ontologyTerm_entity.addKey(Arrays.asList(new String[]{"ontology","termAccession"}),false,"");
			ontologyTerm_entity.addKey(Arrays.asList(new String[]{"ontology","name"}),false,"");
			
			//MolgenisFile
			Entity molgenisFile_entity = new Entity("MolgenisFile",this.getDatabase());
			molgenisFile_entity.setSystem(false);
			molgenisFile_entity.setAbstract(false);
			molgenisFile_entity.setImplements(new String[]{"Nameable"});
			molgenisFile_entity.setDescription("\n\t\t\t\tHelper entity to deal with files. Has a decorator to regulate\n\t\t\t\tstorage and coupling to an Entity. Do not make abstract because of\n\t\t\t\tsubtyping. This means the names of the subclasses will be used to\n\t\t\t\tdistinguish MolgenisFiles and place them in the correct folders.\n\t\t\t\t<br/>\n\t\t\t\tMS: make it use the &lt;field type=\"file\" property under the hood. \n\t\t\t\t<br/>\n\t\t\t\tMS: where do the mimetypes go? I mean, I don't see the added value\n\t\t\t\tnow.\n\t\t\t\n");
			molgenisFile_entity.setXrefLabels(Arrays.asList(new String[]{"name"}));
			Field molgenisFile_extension_field = new Field(molgenisFile_entity, "Extension", MolgenisFieldTypes.getType("string"));
			molgenisFile_extension_field.setDescription("The file extension. This will be mapped to MIME type at runtime. For example, a type 'png' will be served out as 'image/png'.");
			molgenisFile_extension_field.setNillable(false);
			molgenisFile_entity.addField(molgenisFile_extension_field);
			Field molgenisFile_name_field = new Field(molgenisFile_entity, "name", MolgenisFieldTypes.getType("string"));
			molgenisFile_name_field.setDescription("human-readable name.");
			molgenisFile_name_field.setNillable(false);
			molgenisFile_entity.addField(molgenisFile_name_field);
			Field molgenisFile_id_field = new Field(molgenisFile_entity, "id", MolgenisFieldTypes.getType("int"));
			molgenisFile_id_field.setAuto(true);
			molgenisFile_id_field.setDescription("automatically generated id");
			molgenisFile_id_field.setNillable(false);
			molgenisFile_entity.addField(molgenisFile_id_field);
			molgenisFile_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			molgenisFile_entity.addKey(Arrays.asList(new String[]{"name"}),false,"");
			
			//RuntimeProperty
			Entity runtimeProperty_entity = new Entity("RuntimeProperty",this.getDatabase());
			runtimeProperty_entity.setSystem(false);
			runtimeProperty_entity.setAbstract(false);
			runtimeProperty_entity.setImplements(new String[]{"Nameable"});
			runtimeProperty_entity.setDescription("");
			runtimeProperty_entity.setXrefLabels(Arrays.asList(new String[]{"name"}));
			Field runtimeProperty_value_field = new Field(runtimeProperty_entity, "Value", MolgenisFieldTypes.getType("string"));
			runtimeProperty_value_field.setDescription("Value");
			runtimeProperty_value_field.setNillable(false);
			runtimeProperty_entity.addField(runtimeProperty_value_field);
			Field runtimeProperty_name_field = new Field(runtimeProperty_entity, "name", MolgenisFieldTypes.getType("string"));
			runtimeProperty_name_field.setDescription("human-readable name.");
			runtimeProperty_name_field.setNillable(false);
			runtimeProperty_entity.addField(runtimeProperty_name_field);
			Field runtimeProperty_id_field = new Field(runtimeProperty_entity, "id", MolgenisFieldTypes.getType("int"));
			runtimeProperty_id_field.setAuto(true);
			runtimeProperty_id_field.setDescription("automatically generated id");
			runtimeProperty_id_field.setNillable(false);
			runtimeProperty_entity.addField(runtimeProperty_id_field);
			runtimeProperty_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			runtimeProperty_entity.addKey(Arrays.asList(new String[]{"name"}),false,"");
			
			//Publication
			Entity publication_entity = new Entity("Publication",this.getDatabase());
			publication_entity.setSystem(false);
			publication_entity.setAbstract(false);
			publication_entity.setImplements(new String[]{"Nameable"});
			publication_entity.setDescription("\n\n\t\t\t\tPublication is part of the Investigation package and is used to\n\t\t\t\trepresent information about one or more publications related to an\n\t\t\t\tInvestigation. The publication need not only be primary publication\n\t\t\t\tfor an Investigation but may also represent other related\n\t\t\t\tinformation- though this use is less common. Publications have\n\t\t\t\tattributes of publications Authors and also DOI and Pubmed\n\t\t\t\tidentifiers (when these are available). These are represented as\n\t\t\t\tOntologyTerms as in the MAGE-TAB model all 'xrefs' (cross\n\t\t\t\treferences) for ontologies and accession numbers are handled\n\t\t\t\tgenerically. An example of a publication is available in an IDF file\n\t\t\t\tfrom ArrayExpress is experiment E-MTAB-506\n\t\t\t\t<a href=\"ftp://ftp.ebi.ac.uk/pub/databases/microarray/data/experiment/TABM/E-TABM-506/E-TABM-506.idf.txt\">ftp://ftp.ebi.ac.uk/pub/databases/microarray/data/experiment/TABM/E-TABM-506/E-TABM-506.idf.txt\n\t\t\t\t</a>\n\t\t\t\t.\n\t\t\t\t<br/>\n\t\t\t\tThe FuGE equivalent to Publication is FuGE::Bibliographic Reference.\n\t\t\t\n");
			publication_entity.setXrefLabels(Arrays.asList(new String[]{"id"}));
			Field publication_pubmedID_field = new Field(publication_entity, "PubmedID", MolgenisFieldTypes.getType("xref"));
			publication_pubmedID_field.setDescription("Pubmed ID");
			publication_pubmedID_field.setNillable(true);
			publication_pubmedID_field.setXRefVariables("OntologyTerm", "id",Arrays.asList(new String[]{"name"}));
			publication_entity.addField(publication_pubmedID_field);
			Field publication_dOI_field = new Field(publication_entity, "DOI", MolgenisFieldTypes.getType("xref"));
			publication_dOI_field.setDescription("Publication DOI");
			publication_dOI_field.setNillable(true);
			publication_dOI_field.setXRefVariables("OntologyTerm", "id",Arrays.asList(new String[]{"name"}));
			publication_entity.addField(publication_dOI_field);
			Field publication_authorList_field = new Field(publication_entity, "authorList", MolgenisFieldTypes.getType("text"));
			publication_authorList_field.setDescription("The names of the authors of the publication");
			publication_authorList_field.setNillable(true);
			publication_entity.addField(publication_authorList_field);
			Field publication_title_field = new Field(publication_entity, "Title", MolgenisFieldTypes.getType("string"));
			publication_title_field.setDescription("The title of the Publication");
			publication_title_field.setNillable(false);
			publication_entity.addField(publication_title_field);
			Field publication_status_field = new Field(publication_entity, "Status", MolgenisFieldTypes.getType("xref"));
			publication_status_field.setDescription("The status of the Publication");
			publication_status_field.setNillable(true);
			publication_status_field.setXRefVariables("OntologyTerm", "id",Arrays.asList(new String[]{"name"}));
			publication_entity.addField(publication_status_field);
			Field publication_year_field = new Field(publication_entity, "Year", MolgenisFieldTypes.getType("string"));
			publication_year_field.setDescription("The year of the Publication");
			publication_year_field.setNillable(true);
			publication_entity.addField(publication_year_field);
			Field publication_journal_field = new Field(publication_entity, "Journal", MolgenisFieldTypes.getType("string"));
			publication_journal_field.setDescription("The title of the Journal");
			publication_journal_field.setNillable(true);
			publication_entity.addField(publication_journal_field);
			Field publication_name_field = new Field(publication_entity, "name", MolgenisFieldTypes.getType("string"));
			publication_name_field.setDescription("human-readable name.");
			publication_name_field.setNillable(false);
			publication_entity.addField(publication_name_field);
			Field publication_id_field = new Field(publication_entity, "id", MolgenisFieldTypes.getType("int"));
			publication_id_field.setAuto(true);
			publication_id_field.setDescription("automatically generated id");
			publication_id_field.setNillable(false);
			publication_entity.addField(publication_id_field);
			publication_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			publication_entity.addKey(Arrays.asList(new String[]{"name"}),false,"");
			
			//UseCase
			Entity useCase_entity = new Entity("UseCase",this.getDatabase());
			useCase_entity.setSystem(false);
			useCase_entity.setAbstract(false);
			useCase_entity.setDescription(" All the use cases send to the server are stored in this\n\t\t\t\tentity .\n");
			useCase_entity.setXrefLabels(Arrays.asList(new String[]{"UseCaseName"}));
			Field useCase_useCaseId_field = new Field(useCase_entity, "UseCaseId", MolgenisFieldTypes.getType("int"));
			useCase_useCaseId_field.setAuto(true);
			useCase_useCaseId_field.setDescription("UseCaseId");
			useCase_useCaseId_field.setNillable(false);
			useCase_entity.addField(useCase_useCaseId_field);
			Field useCase_useCaseName_field = new Field(useCase_entity, "UseCaseName", MolgenisFieldTypes.getType("string"));
			useCase_useCaseName_field.setDescription("UseCaseName");
			useCase_useCaseName_field.setNillable(false);
			useCase_entity.addField(useCase_useCaseName_field);
			Field useCase_searchType_field = new Field(useCase_entity, "SearchType", MolgenisFieldTypes.getType("string"));
			useCase_searchType_field.setDescription("SearchType");
			useCase_searchType_field.setNillable(false);
			useCase_entity.addField(useCase_searchType_field);
			useCase_entity.addKey(Arrays.asList(new String[]{"UseCaseId"}),false,"");
			useCase_entity.addKey(Arrays.asList(new String[]{"UseCaseName"}),false,"");
			
			//MolgenisEntity
			Entity molgenisEntity_entity = new Entity("MolgenisEntity",this.getDatabase());
			molgenisEntity_entity.setSystem(true);
			molgenisEntity_entity.setAbstract(false);
			molgenisEntity_entity.setImplements(new String[]{"Identifiable"});
			molgenisEntity_entity.setDescription("Referenceable catalog of entity names, menus, forms and\n\t\t\t\tplugins.\n");
			molgenisEntity_entity.setXrefLabels(Arrays.asList(new String[]{"className"}));
			Field molgenisEntity_name_field = new Field(molgenisEntity_entity, "name", MolgenisFieldTypes.getType("string"));
			molgenisEntity_name_field.setDescription("Name of the entity");
			molgenisEntity_name_field.setNillable(false);
			molgenisEntity_entity.addField(molgenisEntity_name_field);
			Field molgenisEntity_type__field = new Field(molgenisEntity_entity, "type_", MolgenisFieldTypes.getType("string"));
			molgenisEntity_type__field.setDescription("Type of the entity");
			molgenisEntity_type__field.setNillable(false);
			molgenisEntity_entity.addField(molgenisEntity_type__field);
			Field molgenisEntity_className_field = new Field(molgenisEntity_entity, "className", MolgenisFieldTypes.getType("string"));
			molgenisEntity_className_field.setDescription("Full name of the entity");
			molgenisEntity_className_field.setNillable(false);
			molgenisEntity_entity.addField(molgenisEntity_className_field);
			Field molgenisEntity_id_field = new Field(molgenisEntity_entity, "id", MolgenisFieldTypes.getType("int"));
			molgenisEntity_id_field.setAuto(true);
			molgenisEntity_id_field.setDescription("automatically generated id");
			molgenisEntity_id_field.setNillable(false);
			molgenisEntity_entity.addField(molgenisEntity_id_field);
			molgenisEntity_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			molgenisEntity_entity.addKey(Arrays.asList(new String[]{"className"}),false,"");
			molgenisEntity_entity.addKey(Arrays.asList(new String[]{"name","type_"}),false,"");
			
			//MolgenisRole
			Entity molgenisRole_entity = new Entity("MolgenisRole",this.getDatabase());
			molgenisRole_entity.setSystem(true);
			molgenisRole_entity.setAbstract(false);
			molgenisRole_entity.setImplements(new String[]{"Identifiable"});
			molgenisRole_entity.setDescription("");
			molgenisRole_entity.setXrefLabels(Arrays.asList(new String[]{"name"}));
			Field molgenisRole_name_field = new Field(molgenisRole_entity, "name", MolgenisFieldTypes.getType("string"));
			molgenisRole_name_field.setDescription("name");
			molgenisRole_name_field.setNillable(false);
			molgenisRole_entity.addField(molgenisRole_name_field);
			Field molgenisRole_id_field = new Field(molgenisRole_entity, "id", MolgenisFieldTypes.getType("int"));
			molgenisRole_id_field.setAuto(true);
			molgenisRole_id_field.setDescription("automatically generated id");
			molgenisRole_id_field.setNillable(false);
			molgenisRole_entity.addField(molgenisRole_id_field);
			molgenisRole_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			molgenisRole_entity.addKey(Arrays.asList(new String[]{"name"}),false,"");
			
			//MolgenisGroup
			Entity molgenisGroup_entity = new Entity("MolgenisGroup",this.getDatabase());
			molgenisGroup_entity.setSystem(true);
			molgenisGroup_entity.setAbstract(false);
			molgenisGroup_entity.setParents(new String[]{"MolgenisRole"});
			molgenisGroup_entity.setDescription("");
			molgenisGroup_entity.setXrefLabels(Arrays.asList(new String[]{"name"}));
			Field molgenisGroup_id_field = new Field(molgenisGroup_entity, "id", MolgenisFieldTypes.getType("int"));
			molgenisGroup_id_field.setAuto(true);
			molgenisGroup_id_field.setDescription("automatically generated id");
			molgenisGroup_id_field.setNillable(false);
			molgenisGroup_entity.addField(molgenisGroup_id_field);
			molgenisGroup_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			
			//Contact
			Entity contact_entity = new Entity("Contact",this.getDatabase());
			contact_entity.setSystem(false);
			contact_entity.setAbstract(true);
			contact_entity.setImplements(new String[]{"Identifiable"});
			contact_entity.setDescription(" A contact is either a person or an organization. Copied\n\t\t\t\tfrom FuGE::Contact.\n");
			contact_entity.setXrefLabels(Arrays.asList(new String[]{"id"}));
			Field contact_address_field = new Field(contact_entity, "Address", MolgenisFieldTypes.getType("text"));
			contact_address_field.setDescription("The address of the Contact.");
			contact_address_field.setNillable(true);
			contact_entity.addField(contact_address_field);
			Field contact_phone_field = new Field(contact_entity, "Phone", MolgenisFieldTypes.getType("string"));
			contact_phone_field.setDescription("The telephone number of the Contact including the suitable area codes.");
			contact_phone_field.setNillable(true);
			contact_entity.addField(contact_phone_field);
			Field contact_email_field = new Field(contact_entity, "Email", MolgenisFieldTypes.getType("string"));
			contact_email_field.setDescription("The email address of the Contact.");
			contact_email_field.setNillable(true);
			contact_entity.addField(contact_email_field);
			Field contact_fax_field = new Field(contact_entity, "Fax", MolgenisFieldTypes.getType("string"));
			contact_fax_field.setDescription("The fax number of the Contact.");
			contact_fax_field.setNillable(true);
			contact_entity.addField(contact_fax_field);
			Field contact_tollFreePhone_field = new Field(contact_entity, "tollFreePhone", MolgenisFieldTypes.getType("string"));
			contact_tollFreePhone_field.setDescription("A toll free phone number for the Contact, including suitable area codes.");
			contact_tollFreePhone_field.setNillable(true);
			contact_entity.addField(contact_tollFreePhone_field);
			Field contact_city_field = new Field(contact_entity, "City", MolgenisFieldTypes.getType("string"));
			contact_city_field.setDescription("Added from the old definition of MolgenisUser. City of this contact.");
			contact_city_field.setNillable(true);
			contact_entity.addField(contact_city_field);
			Field contact_country_field = new Field(contact_entity, "Country", MolgenisFieldTypes.getType("string"));
			contact_country_field.setDescription("Added from the old definition of MolgenisUser. Country of this contact.");
			contact_country_field.setNillable(true);
			contact_entity.addField(contact_country_field);
			Field contact_id_field = new Field(contact_entity, "id", MolgenisFieldTypes.getType("int"));
			contact_id_field.setAuto(true);
			contact_id_field.setDescription("automatically generated id");
			contact_id_field.setNillable(false);
			contact_entity.addField(contact_id_field);
			contact_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			
			//Institute
			Entity institute_entity = new Entity("Institute",this.getDatabase());
			institute_entity.setSystem(false);
			institute_entity.setAbstract(false);
			institute_entity.setImplements(new String[]{"Contact"});
			institute_entity.setDescription(" A contact is either a person or an organization. Copied\n\t\t\t\tfrom FuGE::Contact.\n");
			institute_entity.setXrefLabels(Arrays.asList(new String[]{"name"}));
			Field institute_name_field = new Field(institute_entity, "name", MolgenisFieldTypes.getType("string"));
			institute_name_field.setDescription("name");
			institute_name_field.setNillable(false);
			institute_entity.addField(institute_name_field);
			Field institute_address_field = new Field(institute_entity, "Address", MolgenisFieldTypes.getType("text"));
			institute_address_field.setDescription("The address of the Contact.");
			institute_address_field.setNillable(true);
			institute_entity.addField(institute_address_field);
			Field institute_phone_field = new Field(institute_entity, "Phone", MolgenisFieldTypes.getType("string"));
			institute_phone_field.setDescription("The telephone number of the Contact including the suitable area codes.");
			institute_phone_field.setNillable(true);
			institute_entity.addField(institute_phone_field);
			Field institute_email_field = new Field(institute_entity, "Email", MolgenisFieldTypes.getType("string"));
			institute_email_field.setDescription("The email address of the Contact.");
			institute_email_field.setNillable(true);
			institute_entity.addField(institute_email_field);
			Field institute_fax_field = new Field(institute_entity, "Fax", MolgenisFieldTypes.getType("string"));
			institute_fax_field.setDescription("The fax number of the Contact.");
			institute_fax_field.setNillable(true);
			institute_entity.addField(institute_fax_field);
			Field institute_tollFreePhone_field = new Field(institute_entity, "tollFreePhone", MolgenisFieldTypes.getType("string"));
			institute_tollFreePhone_field.setDescription("A toll free phone number for the Contact, including suitable area codes.");
			institute_tollFreePhone_field.setNillable(true);
			institute_entity.addField(institute_tollFreePhone_field);
			Field institute_city_field = new Field(institute_entity, "City", MolgenisFieldTypes.getType("string"));
			institute_city_field.setDescription("Added from the old definition of MolgenisUser. City of this contact.");
			institute_city_field.setNillable(true);
			institute_entity.addField(institute_city_field);
			Field institute_country_field = new Field(institute_entity, "Country", MolgenisFieldTypes.getType("string"));
			institute_country_field.setDescription("Added from the old definition of MolgenisUser. Country of this contact.");
			institute_country_field.setNillable(true);
			institute_entity.addField(institute_country_field);
			Field institute_id_field = new Field(institute_entity, "id", MolgenisFieldTypes.getType("int"));
			institute_id_field.setAuto(true);
			institute_id_field.setDescription("automatically generated id");
			institute_id_field.setNillable(false);
			institute_entity.addField(institute_id_field);
			institute_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			institute_entity.addKey(Arrays.asList(new String[]{"name"}),false,"");
			
			//Person
			Entity person_entity = new Entity("Person",this.getDatabase());
			person_entity.setSystem(false);
			person_entity.setAbstract(false);
			person_entity.setImplements(new String[]{"Contact"});
			person_entity.setParents(new String[]{"MolgenisRole"});
			person_entity.setDescription("\n\n\t\t\t\tPerson represents one or more people involved with an Investigation.\n\t\t\t\tThis may include authors on a paper, lab personnel or PIs. Person\n\t\t\t\thas last name, firstname, mid initial, address, contact and email. A\n\t\t\t\tPerson role is included to represent how a Person is involved with\n\t\t\t\tan investigation. For submission to repository purposes an allowed\n\t\t\t\tvalue is 'submitter' and the term is present in the MGED Ontology,\n\t\t\t\tan alternative use could represent job title. An Example from\n\t\t\t\tArrayExpress is E-MTAB-506\n\t\t\t\t<a href=\"ftp://ftp.ebi.ac.uk/pub/databases/microarray/data/experiment/TABM/E-TABM-506/E-TABM-506.idf.txt\">\n\t\t\t\t\tftp://ftp.ebi.ac.uk/pub/databases/microarray/data/experiment/TABM/E-TABM-506/E-TABM-506.idf.txt.\n\t\t\t\t</a>\n\t\t\t\t.\n\t\t\t\t<br/>\n\t\t\t\tThe FUGE equivalent to Person is FuGE::Person.\n\t\t\t\n");
			person_entity.setXrefLabels(Arrays.asList(new String[]{"name"}));
			Field person_firstName_field = new Field(person_entity, "FirstName", MolgenisFieldTypes.getType("string"));
			person_firstName_field.setDescription("First Name");
			person_firstName_field.setNillable(true);
			person_entity.addField(person_firstName_field);
			Field person_midInitials_field = new Field(person_entity, "MidInitials", MolgenisFieldTypes.getType("string"));
			person_midInitials_field.setDescription("Mid Initials");
			person_midInitials_field.setNillable(true);
			person_entity.addField(person_midInitials_field);
			Field person_lastName_field = new Field(person_entity, "LastName", MolgenisFieldTypes.getType("string"));
			person_lastName_field.setDescription("Last Name");
			person_lastName_field.setNillable(true);
			person_entity.addField(person_lastName_field);
			Field person_title_field = new Field(person_entity, "Title", MolgenisFieldTypes.getType("string"));
			person_title_field.setDescription("An academic title, e.g. Prof.dr, PhD");
			person_title_field.setNillable(true);
			person_entity.addField(person_title_field);
			Field person_affiliation_field = new Field(person_entity, "Affiliation", MolgenisFieldTypes.getType("xref"));
			person_affiliation_field.setDescription("Affiliation");
			person_affiliation_field.setNillable(true);
			person_affiliation_field.setXRefVariables("Institute", "id",Arrays.asList(new String[]{"name"}));
			person_entity.addField(person_affiliation_field);
			Field person_department_field = new Field(person_entity, "Department", MolgenisFieldTypes.getType("string"));
			person_department_field.setDescription("Added from the old definition of MolgenisUser. Department of this contact.");
			person_department_field.setNillable(true);
			person_entity.addField(person_department_field);
			Field person_roles_field = new Field(person_entity, "Roles", MolgenisFieldTypes.getType("xref"));
			person_roles_field.setDescription("Indicate role of the contact, e.g. lab worker or PI. Changed from mref to xref in oct 2011.");
			person_roles_field.setNillable(true);
			person_roles_field.setXRefVariables("OntologyTerm", "id",Arrays.asList(new String[]{"name"}));
			person_entity.addField(person_roles_field);
			Field person_address_field = new Field(person_entity, "Address", MolgenisFieldTypes.getType("text"));
			person_address_field.setDescription("The address of the Contact.");
			person_address_field.setNillable(true);
			person_entity.addField(person_address_field);
			Field person_phone_field = new Field(person_entity, "Phone", MolgenisFieldTypes.getType("string"));
			person_phone_field.setDescription("The telephone number of the Contact including the suitable area codes.");
			person_phone_field.setNillable(true);
			person_entity.addField(person_phone_field);
			Field person_email_field = new Field(person_entity, "Email", MolgenisFieldTypes.getType("string"));
			person_email_field.setDescription("The email address of the Contact.");
			person_email_field.setNillable(true);
			person_entity.addField(person_email_field);
			Field person_fax_field = new Field(person_entity, "Fax", MolgenisFieldTypes.getType("string"));
			person_fax_field.setDescription("The fax number of the Contact.");
			person_fax_field.setNillable(true);
			person_entity.addField(person_fax_field);
			Field person_tollFreePhone_field = new Field(person_entity, "tollFreePhone", MolgenisFieldTypes.getType("string"));
			person_tollFreePhone_field.setDescription("A toll free phone number for the Contact, including suitable area codes.");
			person_tollFreePhone_field.setNillable(true);
			person_entity.addField(person_tollFreePhone_field);
			Field person_city_field = new Field(person_entity, "City", MolgenisFieldTypes.getType("string"));
			person_city_field.setDescription("Added from the old definition of MolgenisUser. City of this contact.");
			person_city_field.setNillable(true);
			person_entity.addField(person_city_field);
			Field person_country_field = new Field(person_entity, "Country", MolgenisFieldTypes.getType("string"));
			person_country_field.setDescription("Added from the old definition of MolgenisUser. Country of this contact.");
			person_country_field.setNillable(true);
			person_entity.addField(person_country_field);
			Field person_id_field = new Field(person_entity, "id", MolgenisFieldTypes.getType("int"));
			person_id_field.setAuto(true);
			person_id_field.setDescription("automatically generated id");
			person_id_field.setNillable(false);
			person_entity.addField(person_id_field);
			person_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			person_entity.addKey(Arrays.asList(new String[]{"FirstName","MidInitials","LastName"}),false,"");
			
			//Investigation
			Entity investigation_entity = new Entity("Investigation",this.getDatabase());
			investigation_entity.setSystem(false);
			investigation_entity.setAbstract(false);
			investigation_entity.setImplements(new String[]{"Nameable","Describable"});
			investigation_entity.setDescription("Investigation defines self-contained units of study. For\n\t\t\t\texample: Framingham study. Optionally a description and an accession\n\t\t\t\tto a data source can be provided. Each Investigation has a unique\n\t\t\t\tname and a group of subjects of observation (ObservableTarget),\n\t\t\t\ttraits of observation (ObservableFeature), results (in\n\t\t\t\tObservedValues), and optionally actions (Protocols,\n\t\t\t\tProtoclApplications). 'Invetigation' maps to standard XGAP/FuGE\n\t\t\t\tInvestigation, MAGE-TAB Experiment and METABASE:Study.\n");
			investigation_entity.setXrefLabels(Arrays.asList(new String[]{"name"}));
			Field investigation_startDate_field = new Field(investigation_entity, "startDate", MolgenisFieldTypes.getType("datetime"));
			investigation_startDate_field.setAuto(true);
			investigation_startDate_field.setDescription("The start point of the study.");
			investigation_startDate_field.setNillable(true);
			investigation_entity.addField(investigation_startDate_field);
			Field investigation_endDate_field = new Field(investigation_entity, "endDate", MolgenisFieldTypes.getType("datetime"));
			investigation_endDate_field.setDescription("The end point of the study.");
			investigation_endDate_field.setNillable(true);
			investigation_entity.addField(investigation_endDate_field);
			Field investigation_contacts_field = new Field(investigation_entity, "contacts", MolgenisFieldTypes.getType("mref"));
			investigation_contacts_field.setDescription("Contact persons for this study");
			investigation_contacts_field.setNillable(true);
			investigation_contacts_field.setXRefVariables("Person", "id",Arrays.asList(new String[]{"name"}));
			investigation_entity.addField(investigation_contacts_field);
			Field investigation_accession_field = new Field(investigation_entity, "accession", MolgenisFieldTypes.getType("hyperlink"));
			investigation_accession_field.setDescription("(Optional) URI or accession number to indicate source of Study. E.g. arrayexpress:M-EXP-2345");
			investigation_accession_field.setNillable(true);
			investigation_entity.addField(investigation_accession_field);
			Field investigation_name_field = new Field(investigation_entity, "name", MolgenisFieldTypes.getType("string"));
			investigation_name_field.setDescription("human-readable name.");
			investigation_name_field.setNillable(false);
			investigation_entity.addField(investigation_name_field);
			Field investigation_id_field = new Field(investigation_entity, "id", MolgenisFieldTypes.getType("int"));
			investigation_id_field.setAuto(true);
			investigation_id_field.setDescription("automatically generated id");
			investigation_id_field.setNillable(false);
			investigation_entity.addField(investigation_id_field);
			Field investigation_description_field = new Field(investigation_entity, "description", MolgenisFieldTypes.getType("text"));
			investigation_description_field.setDescription("description field");
			investigation_description_field.setNillable(true);
			investigation_entity.addField(investigation_description_field);
			investigation_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			investigation_entity.addKey(Arrays.asList(new String[]{"name"}),false,"");
			
			//ObservationElement
			Entity observationElement_entity = new Entity("ObservationElement",this.getDatabase());
			observationElement_entity.setSystem(false);
			observationElement_entity.setAbstract(false);
			observationElement_entity.setImplements(new String[]{"InvestigationElement"});
			observationElement_entity.setDescription(" Elements that are the targets or features we are\n\t\t\t\tlooking at of our research.\n\t\t\t\n");
			observationElement_entity.setXrefLabels(Arrays.asList(new String[]{"name"}));
			Field observationElement_ontologyReference_field = new Field(observationElement_entity, "ontologyReference", MolgenisFieldTypes.getType("mref"));
			observationElement_ontologyReference_field.setDescription("(Optional) Reference to the formal ontology definition for this element, e.g. 'Animal' or 'GWAS protocol'");
			observationElement_ontologyReference_field.setNillable(true);
			observationElement_ontologyReference_field.setXRefVariables("OntologyTerm", "id",Arrays.asList(new String[]{"name"}));
			observationElement_entity.addField(observationElement_ontologyReference_field);
			Field observationElement_alternateId_field = new Field(observationElement_entity, "AlternateId", MolgenisFieldTypes.getType("mref"));
			observationElement_alternateId_field.setDescription("Alternative identifiers or symbols that this element is known by.");
			observationElement_alternateId_field.setNillable(true);
			observationElement_alternateId_field.setXRefVariables("AlternateId", "id",Arrays.asList(new String[]{"name"}));
			observationElement_entity.addField(observationElement_alternateId_field);
			Field observationElement_label_field = new Field(observationElement_entity, "label", MolgenisFieldTypes.getType("string"));
			observationElement_label_field.setDescription("User friendly textual representation of this ObservationElement. For example: 'male',     'mouse 3 in cage 7' or 'TRA-2 like protein'. Label allows for human-readable name that is potentially not unique.");
			observationElement_label_field.setNillable(true);
			observationElement_entity.addField(observationElement_label_field);
			Field observationElement_investigation_field = new Field(observationElement_entity, "Investigation", MolgenisFieldTypes.getType("xref"));
			observationElement_investigation_field.setDescription("Reference to the Study that this data element is part of");
			observationElement_investigation_field.setNillable(true);
			observationElement_investigation_field.setXRefVariables("Investigation", "id",Arrays.asList(new String[]{"name"}));
			observationElement_entity.addField(observationElement_investigation_field);
			Field observationElement_name_field = new Field(observationElement_entity, "name", MolgenisFieldTypes.getType("string"));
			observationElement_name_field.setDescription("human-readable name.");
			observationElement_name_field.setNillable(false);
			observationElement_entity.addField(observationElement_name_field);
			Field observationElement_id_field = new Field(observationElement_entity, "id", MolgenisFieldTypes.getType("int"));
			observationElement_id_field.setAuto(true);
			observationElement_id_field.setDescription("automatically generated id");
			observationElement_id_field.setNillable(false);
			observationElement_entity.addField(observationElement_id_field);
			Field observationElement_description_field = new Field(observationElement_entity, "description", MolgenisFieldTypes.getType("text"));
			observationElement_description_field.setDescription("description field");
			observationElement_description_field.setNillable(true);
			observationElement_entity.addField(observationElement_description_field);
			observationElement_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			observationElement_entity.addKey(Arrays.asList(new String[]{"name","Investigation"}),false,"");
			observationElement_entity.addKey(Arrays.asList(new String[]{"name"}),false,"");
			
			//ObservationTarget
			Entity observationTarget_entity = new Entity("ObservationTarget",this.getDatabase());
			observationTarget_entity.setSystem(false);
			observationTarget_entity.setAbstract(false);
			observationTarget_entity.setParents(new String[]{"ObservationElement"});
			observationTarget_entity.setDescription(" An ObservationTarget class defines the subjects of\n\t\t\t\tobservation. For instance: individual 1 from Investigation x. The\n\t\t\t\tObservationTarget class maps to XGAP:Subject, METABASE:Patient and\n\t\t\t\tmaps to Page:Abstract_Observation_Target. The name of\n\t\t\t\tobservationTargets is unique.\n\t\t\t\n");
			observationTarget_entity.setXrefLabels(Arrays.asList(new String[]{"name"}));
			Field observationTarget_id_field = new Field(observationTarget_entity, "id", MolgenisFieldTypes.getType("int"));
			observationTarget_id_field.setAuto(true);
			observationTarget_id_field.setDescription("automatically generated id");
			observationTarget_id_field.setNillable(false);
			observationTarget_entity.addField(observationTarget_id_field);
			observationTarget_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			
			//ObservableFeature
			Entity observableFeature_entity = new Entity("ObservableFeature",this.getDatabase());
			observableFeature_entity.setSystem(false);
			observableFeature_entity.setAbstract(false);
			observableFeature_entity.setParents(new String[]{"ObservationElement"});
			observableFeature_entity.setDescription("ObservableFeature defines anything that can be observed\n\t\t\t\tin a phenotypic Investigation. For instance: Height, Systolic blood\n\t\t\t\tpressure, Diastolic blood pressure, and Treatment for hypertension\n\t\t\t\tare observable features. The name of ObservableFeature is unique\n\t\t\t\twithin one Investigation. It is recommended that each\n\t\t\t\tObservableFeature is named according to a well-defined ontology term\n\t\t\t\twhich can be specified via ontologyReference. Note that in some\n\t\t\t\tinstances an observableFeature can also be an observationTarget, for\n\t\t\t\texample in the case of correlation matrices. The ObservableFeature\n\t\t\t\tclass maps to XGAP:Trait, METABASE:Question, FuGE:DimensionElement,\n\t\t\t\tand PaGE:ObservableFeature. Multi-value features can be grouped by\n\t\t\t\tProtocol. For instance: high blood pressure can be inferred from\n\t\t\t\tobservations for features systolic and diastolic blood pressure.\n\t\t\t\tThere may be many alternative protocols to measure a feature. See\n\t\t\t\tProtocol section.\n\t\t\t\n");
			observableFeature_entity.setXrefLabels(Arrays.asList(new String[]{"name"}));
			Field observableFeature_id_field = new Field(observableFeature_entity, "id", MolgenisFieldTypes.getType("int"));
			observableFeature_id_field.setAuto(true);
			observableFeature_id_field.setDescription("automatically generated id");
			observableFeature_id_field.setNillable(false);
			observableFeature_entity.addField(observableFeature_id_field);
			observableFeature_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			
			//Category
			Entity category_entity = new Entity("Category",this.getDatabase());
			category_entity.setSystem(false);
			category_entity.setAbstract(false);
			category_entity.setParents(new String[]{"ObservationElement"});
			category_entity.setDescription("Special kind of ObservationElement to define categorical answer codes such as are\n\t\t\t\toften used in Questionaires. A list of categories can be attached to an\n\t\t\t\tMeasurement using Measurement.categories. For example the\n\t\t\t\tMeasurement 'sex' has {code_string = 1, label=male} and {code_string = 2,\n\t\t\t\tlabel=female}. Categories can be linked to well-defined ontology terms\n\t\t\t\tvia the ontologyReference. Category extends ObservationElement such that\n\t\t\t\tit can be referenced by ObservedValue.value. The Category class maps\n\t\t\t\tto METABASE::Category\n\t\t\t\n");
			category_entity.setXrefLabels(Arrays.asList(new String[]{"name"}));
			Field category_code_string_field = new Field(category_entity, "code_string", MolgenisFieldTypes.getType("string"));
			category_code_string_field.setDescription("The code used to represent this category. For example: { '1' codes for 'male', '2'-'female'}");
			category_code_string_field.setNillable(false);
			category_entity.addField(category_code_string_field);
			Field category_description_field = new Field(category_entity, "description", MolgenisFieldTypes.getType("text"));
			category_description_field.setDescription("Description of the code.     Use of ontology terms references to establish unambigious descriptions is     recommended");
			category_description_field.setNillable(false);
			category_entity.addField(category_description_field);
			Field category_isMissing_field = new Field(category_entity, "isMissing", MolgenisFieldTypes.getType("bool"));
			category_isMissing_field.setDevaultValue("false");
			category_isMissing_field.setDescription("whether this code should be treated as missing value.");
			category_isMissing_field.setNillable(false);
			category_entity.addField(category_isMissing_field);
			Field category_id_field = new Field(category_entity, "id", MolgenisFieldTypes.getType("int"));
			category_id_field.setAuto(true);
			category_id_field.setDescription("automatically generated id");
			category_id_field.setNillable(false);
			category_entity.addField(category_id_field);
			category_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			
			//Measurement
			Entity measurement_entity = new Entity("Measurement",this.getDatabase());
			measurement_entity.setSystem(false);
			measurement_entity.setAbstract(false);
			measurement_entity.setParents(new String[]{"ObservableFeature"});
			measurement_entity.setDescription("Generic obserable feature to flexibly define a\n\t\t\t\tmeasurement\n\t\t\t\n");
			measurement_entity.setXrefLabels(Arrays.asList(new String[]{"name"}));
			Field measurement_unit_field = new Field(measurement_entity, "unit", MolgenisFieldTypes.getType("xref"));
			measurement_unit_field.setDescription("(Optional) Reference to the well-defined measurement unit used to observe this feature       (if feature is that concrete). E.g. mmHg");
			measurement_unit_field.setNillable(true);
			measurement_unit_field.setXRefVariables("OntologyTerm", "id",Arrays.asList(new String[]{"name"}));
			measurement_entity.addField(measurement_unit_field);
			Field measurement_dataType_field = new Field(measurement_entity, "dataType", MolgenisFieldTypes.getType("enum"));
			Vector<String> measurement_dataType_field_enumoptions = new Vector<String>();
			measurement_dataType_field_enumoptions.add("xref");
			measurement_dataType_field_enumoptions.add("string");
			measurement_dataType_field_enumoptions.add("categorical");
			measurement_dataType_field_enumoptions.add("date");
			measurement_dataType_field_enumoptions.add("datetime");
			measurement_dataType_field_enumoptions.add("int");
			measurement_dataType_field_enumoptions.add("code");
			measurement_dataType_field_enumoptions.add("image");
			measurement_dataType_field_enumoptions.add("decimal");
			measurement_dataType_field_enumoptions.add("bool");
			measurement_dataType_field_enumoptions.add("file");
			measurement_dataType_field_enumoptions.add("log");
			measurement_dataType_field_enumoptions.add("data");
			measurement_dataType_field_enumoptions.add("exe");
			measurement_dataType_field.setEnumOptions(measurement_dataType_field_enumoptions);
			measurement_dataType_field.setDevaultValue("string");
			measurement_dataType_field.setDescription("(Optional) Reference to the technical data type. E.g. 'int'");
			measurement_dataType_field.setNillable(false);
			measurement_entity.addField(measurement_dataType_field);
			Field measurement_temporal_field = new Field(measurement_entity, "temporal", MolgenisFieldTypes.getType("bool"));
			measurement_temporal_field.setDevaultValue("false");
			measurement_temporal_field.setDescription("Whether this feature is time dependent and can have different values when measured       on different times (e.g. weight, temporal=true) or generally only measured once (e.g. birth date,       temporal=false)");
			measurement_temporal_field.setNillable(false);
			measurement_entity.addField(measurement_temporal_field);
			Field measurement_categories_field = new Field(measurement_entity, "categories", MolgenisFieldTypes.getType("mref"));
			measurement_categories_field.setDescription("Translation of codes into categories if applicable");
			measurement_categories_field.setNillable(true);
			measurement_categories_field.setXRefVariables("Category", "id",Arrays.asList(new String[]{"name"}));
			measurement_entity.addField(measurement_categories_field);
			Field measurement_description_field = new Field(measurement_entity, "description", MolgenisFieldTypes.getType("text"));
			measurement_description_field.setDescription("(Optional) Rudimentary meta data about the observable feature. Use of ontology       terms references to establish unambigious descriptions is recommended");
			measurement_description_field.setNillable(true);
			measurement_entity.addField(measurement_description_field);
			Field measurement_targettypeAllowedForRelation_field = new Field(measurement_entity, "targettypeAllowedForRelation", MolgenisFieldTypes.getType("xref"));
			measurement_targettypeAllowedForRelation_field.setDescription("Subclass of ObservationTarget (Individual, Panel or Location) that      can be linked to (through the 'relation' field in ObservedValue) when using this       Measurement (example: a Measurement 'Species' can only result in ObservedValues       that have relations to Panels)");
			measurement_targettypeAllowedForRelation_field.setNillable(true);
			measurement_targettypeAllowedForRelation_field.setXRefVariables("MolgenisEntity", "id",Arrays.asList(new String[]{"className"}));
			measurement_entity.addField(measurement_targettypeAllowedForRelation_field);
			Field measurement_panelLabelAllowedForRelation_field = new Field(measurement_entity, "panelLabelAllowedForRelation", MolgenisFieldTypes.getType("string"));
			measurement_panelLabelAllowedForRelation_field.setDescription("Label that must have been applied to the Panel that      can be linked to (through the 'relation' field in ObservedValue) when using this       Measurement (example: a Measurement 'Species' can only result      in ObservedValues that have relations to Panels labeled as 'Species')");
			measurement_panelLabelAllowedForRelation_field.setNillable(true);
			measurement_entity.addField(measurement_panelLabelAllowedForRelation_field);
			Field measurement_id_field = new Field(measurement_entity, "id", MolgenisFieldTypes.getType("int"));
			measurement_id_field.setAuto(true);
			measurement_id_field.setDescription("automatically generated id");
			measurement_id_field.setNillable(false);
			measurement_entity.addField(measurement_id_field);
			measurement_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			
			//Individual
			Entity individual_entity = new Entity("Individual",this.getDatabase());
			individual_entity.setSystem(false);
			individual_entity.setAbstract(false);
			individual_entity.setParents(new String[]{"ObservationTarget"});
			individual_entity.setDescription(" The Individuals class defines human cases that are used\n\t\t\t\tas observation target. The Individual class maps to XGAP:Individual\n\t\t\t\tand PaGE:Individual. Note that minimal information like 'sex' can be\n\t\t\t\tdefined as ObservedValue, and that that basic relationships like\n\t\t\t\t'father' and 'mother' can also be defined via ObservedRelationship,\n\t\t\t\tusing the 'relation' field. Groups of individuals can be defined via\n\t\t\t\tPanel.\n\t\t\t\n");
			individual_entity.setXrefLabels(Arrays.asList(new String[]{"name"}));
			Field individual_mother_field = new Field(individual_entity, "Mother", MolgenisFieldTypes.getType("xref"));
			individual_mother_field.setDescription("Refers to the mother of the individual.");
			individual_mother_field.setNillable(true);
			individual_mother_field.setXRefVariables("Individual", "id",Arrays.asList(new String[]{"name"}));
			individual_entity.addField(individual_mother_field);
			Field individual_father_field = new Field(individual_entity, "Father", MolgenisFieldTypes.getType("xref"));
			individual_father_field.setDescription("Refers to the father of the individual.");
			individual_father_field.setNillable(true);
			individual_father_field.setXRefVariables("Individual", "id",Arrays.asList(new String[]{"name"}));
			individual_entity.addField(individual_father_field);
			Field individual_id_field = new Field(individual_entity, "id", MolgenisFieldTypes.getType("int"));
			individual_id_field.setAuto(true);
			individual_id_field.setDescription("automatically generated id");
			individual_id_field.setNillable(false);
			individual_entity.addField(individual_id_field);
			individual_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			
			//Location
			Entity location_entity = new Entity("Location",this.getDatabase());
			location_entity.setSystem(false);
			location_entity.setAbstract(false);
			location_entity.setParents(new String[]{"ObservationTarget"});
			location_entity.setDescription("This class defines physical locations such as buildings,\n\t\t\t\tdepartments, rooms, freezers and cages. Use ObservedValues to link\n\t\t\t\tlocations to eachother, to build a location hierarchy.\n\t\t\t\n");
			location_entity.setXrefLabels(Arrays.asList(new String[]{"name"}));
			Field location_id_field = new Field(location_entity, "id", MolgenisFieldTypes.getType("int"));
			location_id_field.setAuto(true);
			location_id_field.setDescription("automatically generated id");
			location_id_field.setNillable(false);
			location_entity.addField(location_id_field);
			location_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			
			//Panel
			Entity panel_entity = new Entity("Panel",this.getDatabase());
			panel_entity.setSystem(false);
			panel_entity.setAbstract(false);
			panel_entity.setParents(new String[]{"ObservationTarget"});
			panel_entity.setDescription("The Panel class defines groups of individuals based on\n\t\t\t\tcohort design, case/controls, families, etc. For instance: LifeLines\n\t\t\t\tcohort, 'middle aged man', 'recombinant mouse inbred Line dba x b6'\n\t\t\t\tor 'Smith family'. A Panel can act as a single ObservationTarget.\n\t\t\t\tFor example: average height (ObservedValue) in the LifeLines cohort\n\t\t\t\t(Panel) is 174cm. The Panel class maps to XGAP:Strain and PaGE:Panel\n\t\t\t\tclasses. In METABASE this is assumed there is one panel per study.\n\t\t\t\n");
			panel_entity.setXrefLabels(Arrays.asList(new String[]{"name"}));
			Field panel_individuals_field = new Field(panel_entity, "Individuals", MolgenisFieldTypes.getType("mref"));
			panel_individuals_field.setDescription("The list of individuals in this panel");
			panel_individuals_field.setNillable(true);
			panel_individuals_field.setXRefVariables("Individual", "id",Arrays.asList(new String[]{"name"}));
			panel_entity.addField(panel_individuals_field);
			Field panel_species_field = new Field(panel_entity, "Species", MolgenisFieldTypes.getType("xref"));
			panel_species_field.setDescription("The species this panel is an instance of/part of/extracted from.");
			panel_species_field.setNillable(true);
			panel_species_field.setXRefVariables("Species", "id",Arrays.asList(new String[]{"name"}));
			panel_entity.addField(panel_species_field);
			Field panel_panelType_field = new Field(panel_entity, "PanelType", MolgenisFieldTypes.getType("xref"));
			panel_panelType_field.setDescription("Indicate the type of Panel (example: Natural=wild type, Parental=parents of a cross, F1=First generation of cross, RCC=Recombinant congenic, CSS=chromosome substitution)");
			panel_panelType_field.setNillable(true);
			panel_panelType_field.setXRefVariables("OntologyTerm", "id",Arrays.asList(new String[]{"name"}));
			panel_entity.addField(panel_panelType_field);
			Field panel_founderPanels_field = new Field(panel_entity, "FounderPanels", MolgenisFieldTypes.getType("mref"));
			panel_founderPanels_field.setDescription("The panel(s) that were used to create this panel.");
			panel_founderPanels_field.setNillable(true);
			panel_founderPanels_field.setXRefVariables("Panel", "id",Arrays.asList(new String[]{"name"}));
			panel_entity.addField(panel_founderPanels_field);
			Field panel_id_field = new Field(panel_entity, "id", MolgenisFieldTypes.getType("int"));
			panel_id_field.setAuto(true);
			panel_id_field.setDescription("automatically generated id");
			panel_id_field.setNillable(false);
			panel_entity.addField(panel_id_field);
			panel_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			
			//InvestigationElement
			Entity investigationElement_entity = new Entity("InvestigationElement",this.getDatabase());
			investigationElement_entity.setSystem(false);
			investigationElement_entity.setAbstract(true);
			investigationElement_entity.setImplements(new String[]{"Nameable","Describable"});
			investigationElement_entity.setDescription("General superclass to use for all elements of an\n\t\t\t\tInvestigation. The unique forces all of these elements to have\n\t\t\t\tunique names within one Investigation. (can be changed to\n\t\t\t\tName,Study,Type by flipping a boolean in the molgenis 'Unique'\n\t\t\t\tclass.)\n");
			investigationElement_entity.setXrefLabels(Arrays.asList(new String[]{"name"}));
			Field investigationElement_investigation_field = new Field(investigationElement_entity, "Investigation", MolgenisFieldTypes.getType("xref"));
			investigationElement_investigation_field.setDescription("Reference to the Study that this data element is part of");
			investigationElement_investigation_field.setNillable(true);
			investigationElement_investigation_field.setXRefVariables("Investigation", "id",Arrays.asList(new String[]{"name"}));
			investigationElement_entity.addField(investigationElement_investigation_field);
			Field investigationElement_name_field = new Field(investigationElement_entity, "name", MolgenisFieldTypes.getType("string"));
			investigationElement_name_field.setDescription("human-readable name.");
			investigationElement_name_field.setNillable(false);
			investigationElement_entity.addField(investigationElement_name_field);
			Field investigationElement_id_field = new Field(investigationElement_entity, "id", MolgenisFieldTypes.getType("int"));
			investigationElement_id_field.setAuto(true);
			investigationElement_id_field.setDescription("automatically generated id");
			investigationElement_id_field.setNillable(false);
			investigationElement_entity.addField(investigationElement_id_field);
			Field investigationElement_description_field = new Field(investigationElement_entity, "description", MolgenisFieldTypes.getType("text"));
			investigationElement_description_field.setDescription("description field");
			investigationElement_description_field.setNillable(true);
			investigationElement_entity.addField(investigationElement_description_field);
			investigationElement_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			investigationElement_entity.addKey(Arrays.asList(new String[]{"name","Investigation"}),false,"");
			
			//MolgenisUser
			Entity molgenisUser_entity = new Entity("MolgenisUser",this.getDatabase());
			molgenisUser_entity.setSystem(true);
			molgenisUser_entity.setAbstract(false);
			molgenisUser_entity.setParents(new String[]{"Person"});
			molgenisUser_entity.setDescription("Anyone who can login\n");
			molgenisUser_entity.setXrefLabels(Arrays.asList(new String[]{"name"}));
			Field molgenisUser_password__field = new Field(molgenisUser_entity, "password_", MolgenisFieldTypes.getType("string"));
			molgenisUser_password__field.setDevaultValue("secret");
			molgenisUser_password__field.setDescription("big fixme: password type");
			molgenisUser_password__field.setNillable(false);
			molgenisUser_entity.addField(molgenisUser_password__field);
			Field molgenisUser_activationCode_field = new Field(molgenisUser_entity, "activationCode", MolgenisFieldTypes.getType("string"));
			molgenisUser_activationCode_field.setDescription("Used as alternative authentication mechanism to verify user email and/or if user has lost password.");
			molgenisUser_activationCode_field.setNillable(true);
			molgenisUser_entity.addField(molgenisUser_activationCode_field);
			Field molgenisUser_active_field = new Field(molgenisUser_entity, "active", MolgenisFieldTypes.getType("bool"));
			molgenisUser_active_field.setDevaultValue("false");
			molgenisUser_active_field.setDescription("Boolean to indicate if this account can be used to login");
			molgenisUser_active_field.setNillable(false);
			molgenisUser_entity.addField(molgenisUser_active_field);
			Field molgenisUser_superuser_field = new Field(molgenisUser_entity, "superuser", MolgenisFieldTypes.getType("bool"));
			molgenisUser_superuser_field.setDevaultValue("false");
			molgenisUser_superuser_field.setDescription("superuser");
			molgenisUser_superuser_field.setNillable(false);
			molgenisUser_entity.addField(molgenisUser_superuser_field);
			Field molgenisUser_id_field = new Field(molgenisUser_entity, "id", MolgenisFieldTypes.getType("int"));
			molgenisUser_id_field.setAuto(true);
			molgenisUser_id_field.setDescription("automatically generated id");
			molgenisUser_id_field.setNillable(false);
			molgenisUser_entity.addField(molgenisUser_id_field);
			molgenisUser_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			
			//Protocol
			Entity protocol_entity = new Entity("Protocol",this.getDatabase());
			protocol_entity.setSystem(false);
			protocol_entity.setAbstract(false);
			protocol_entity.setImplements(new String[]{"InvestigationElement"});
			protocol_entity.setDescription("\n\n\t\t\t\tThe Protocol class defines parameterizable descriptions of methods;\n\t\t\t\teach protocol has a unique name within an Study. Each\n\t\t\t\tProtocolApplication can define the ObservableFeatures it can\n\t\t\t\tobserve. Also the protocol parameters can be modeled using\n\t\t\t\tObservableFeatures (Users are expected to 'tag' the observeable\n\t\t\t\tfeature by setting ObserveableFeature type as 'ProtocolParameter'.\n\t\t\t\tExamples of protocols are: SOP for blood pressure measurement used\n\t\t\t\tby UK biobank, or 'R/qtl' as protocol for statistical analysis.\n\t\t\t\tProtocol is a high level object that represents the details of\n\t\t\t\tprotocols used during the investigation. The uses of Protocols to\n\t\t\t\tprocess BioMaterials and Data are referenced by ProtocolApplication\n\t\t\t\t(in the SDRF part of the format). Protocol has an association to\n\t\t\t\tOntologyTerm to represent the type of protocol. Protocols are\n\t\t\t\tassociated with Hardware, Software and Parameters used in the\n\t\t\t\tProtocol. An example from ArrayExpress is E-MTAB-506\n\t\t\t\t<a href=\"ftp://ftp.ebi.ac.uk/pub/databases/microarray/data/experiment/TABM/E-TABM-506/E-TABM-506.idf.txt\">\n\t\t\t\t\tftp://ftp.ebi.ac.uk/pub/databases/microarray/data/experiment/TABM/E-TABM-506/E-TABM-506.idf.txt.\n\t\t\t\t</a>\n    <br/>\n\t\t\t\tThe FUGE equivalent to Protocol is FuGE::Protocol.\n\t\t\t\t<br/>\n\t\t\t\tThe Protocol class maps to FuGE/XGAP/MageTab Protocol, but in\n\t\t\t\tcontrast to FuGE it is not required to extend protocol before use.\n\t\t\t\tThe Protocol class also maps to METABASE:Form (note that components\n\t\t\t\tare solved during METABASE:Visit which can be nested). Has no\n\t\t\t\tequivalent in PaGE.\n\t\t\t\n");
			protocol_entity.setXrefLabels(Arrays.asList(new String[]{"name"}));
			Field protocol_ontologyReference_field = new Field(protocol_entity, "ontologyReference", MolgenisFieldTypes.getType("mref"));
			protocol_ontologyReference_field.setDescription("(Optional) Reference to the formal ontology definition for this element, e.g. 'Animal' or 'GWAS protocol'");
			protocol_ontologyReference_field.setNillable(true);
			protocol_ontologyReference_field.setXRefVariables("OntologyTerm", "id",Arrays.asList(new String[]{"name"}));
			protocol_entity.addField(protocol_ontologyReference_field);
			Field protocol_protocolType_field = new Field(protocol_entity, "ProtocolType", MolgenisFieldTypes.getType("xref"));
			protocol_protocolType_field.setDescription("annotation of the protocol to a well-defined ontological class.");
			protocol_protocolType_field.setNillable(true);
			protocol_protocolType_field.setXRefVariables("OntologyTerm", "id",Arrays.asList(new String[]{"name"}));
			protocol_entity.addField(protocol_protocolType_field);
			Field protocol_description_field = new Field(protocol_entity, "description", MolgenisFieldTypes.getType("richtext"));
			protocol_description_field.setDescription("Description, or reference to a description, of the protocol");
			protocol_description_field.setNillable(true);
			protocol_entity.addField(protocol_description_field);
			Field protocol_features_field = new Field(protocol_entity, "Features", MolgenisFieldTypes.getType("mref"));
			protocol_features_field.setDescription("The features that can be observed using this protocol. For example 'length' or 'rs123534' or 'probe123'. Also protocol parameters are considered observable features as they are important to the interpretation of the observed values.");
			protocol_features_field.setNillable(true);
			protocol_features_field.setXRefVariables("ObservableFeature", "id",Arrays.asList(new String[]{"name"}));
			protocol_entity.addField(protocol_features_field);
			Field protocol_targetFilter_field = new Field(protocol_entity, "TargetFilter", MolgenisFieldTypes.getType("string"));
			protocol_targetFilter_field.setDescription("Expression that filters the InvestigationElements that can be targetted using this protocol.     This helps the user to only select from targets that matter when setting observedvalues. For example: type='individual' AND species = 'human'");
			protocol_targetFilter_field.setNillable(true);
			protocol_entity.addField(protocol_targetFilter_field);
			Field protocol_contact_field = new Field(protocol_entity, "Contact", MolgenisFieldTypes.getType("xref"));
			protocol_contact_field.setDescription("TODO Check if there can be multiple contacts.");
			protocol_contact_field.setNillable(true);
			protocol_contact_field.setXRefVariables("Person", "id",Arrays.asList(new String[]{"name"}));
			protocol_entity.addField(protocol_contact_field);
			Field protocol_subprotocols_field = new Field(protocol_entity, "subprotocols", MolgenisFieldTypes.getType("mref"));
			protocol_subprotocols_field.setDescription("Subprotocols of this protocol");
			protocol_subprotocols_field.setNillable(true);
			protocol_subprotocols_field.setXRefVariables("Protocol", "id",Arrays.asList(new String[]{"name"}));
			protocol_entity.addField(protocol_subprotocols_field);
			Field protocol_investigation_field = new Field(protocol_entity, "Investigation", MolgenisFieldTypes.getType("xref"));
			protocol_investigation_field.setDescription("Reference to the Study that this data element is part of");
			protocol_investigation_field.setNillable(true);
			protocol_investigation_field.setXRefVariables("Investigation", "id",Arrays.asList(new String[]{"name"}));
			protocol_entity.addField(protocol_investigation_field);
			Field protocol_name_field = new Field(protocol_entity, "name", MolgenisFieldTypes.getType("string"));
			protocol_name_field.setDescription("human-readable name.");
			protocol_name_field.setNillable(false);
			protocol_entity.addField(protocol_name_field);
			Field protocol_id_field = new Field(protocol_entity, "id", MolgenisFieldTypes.getType("int"));
			protocol_id_field.setAuto(true);
			protocol_id_field.setDescription("automatically generated id");
			protocol_id_field.setNillable(false);
			protocol_entity.addField(protocol_id_field);
			protocol_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			protocol_entity.addKey(Arrays.asList(new String[]{"name","Investigation"}),false,"");
			
			//Workflow
			Entity workflow_entity = new Entity("Workflow",this.getDatabase());
			workflow_entity.setSystem(false);
			workflow_entity.setAbstract(false);
			workflow_entity.setImplements(new String[]{"Identifiable","Nameable"});
			workflow_entity.setParents(new String[]{"Protocol"});
			workflow_entity.setDescription("A workflow is a plan to execute a series of subprotocols\n\t\t\t\tin a particular order. Each workflow elements is another protocol as\n\t\t\t\trefered to via WorkflowElement. Because Workflow extends Protocol,\n\t\t\t\tworkflows can be nested just as any other protocol.\n\t\t\t\n");
			workflow_entity.setXrefLabels(Arrays.asList(new String[]{"name"}));
			Field workflow_id_field = new Field(workflow_entity, "id", MolgenisFieldTypes.getType("int"));
			workflow_id_field.setAuto(true);
			workflow_id_field.setDescription("automatically generated id");
			workflow_id_field.setNillable(false);
			workflow_entity.addField(workflow_id_field);
			Field workflow_name_field = new Field(workflow_entity, "name", MolgenisFieldTypes.getType("string"));
			workflow_name_field.setDescription("human-readable name.");
			workflow_name_field.setNillable(false);
			workflow_entity.addField(workflow_name_field);
			workflow_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			workflow_entity.addKey(Arrays.asList(new String[]{"name"}),false,"");
			
			//ProtocolApplication
			Entity protocolApplication_entity = new Entity("ProtocolApplication",this.getDatabase());
			protocolApplication_entity.setSystem(false);
			protocolApplication_entity.setAbstract(false);
			protocolApplication_entity.setImplements(new String[]{"InvestigationElement"});
			protocolApplication_entity.setDescription("\n\t\t\t\tA ProtocolApplication class defines the actual action of observation\n\t\t\t\tby refering to a protocol and optional ParameterValues. The name\n\t\t\t\tfield can be used to label applications with a human understandeable\n\t\t\t\ttag. For example: the action of blood pressure measurement on 1000\n\t\t\t\tindividuals, using a particular protocol, resulting in 1000\n\t\t\t\tassociated observed values. If desired, protocols can be shared\n\t\t\t\tbetween Studys; in those cases one should simply refer to a protocol\n\t\t\t\tin another Study.\n\t\t\t\t<br/>\n\t\t\t\tProtocolApplications are used in MAGE-TAB format to reference to\n\t\t\t\tprotocols used, with optionally use of certain protocol parameter\n\t\t\t\tvalues. For example, a Source may be transformed into a Labeled\n\t\t\t\tExtract by the subsequent application of a Extraction and Labeling\n\t\t\t\tprotocol. ProtocolApplication is associated with and Edge that links\n\t\t\t\tinput/output, e.g. Source to Labeled Extract. The order of the\n\t\t\t\tapplication of protocols can be set in order to be able to\n\t\t\t\treconstruct the left-to-right order of protocol references in\n\t\t\t\tMAGE-TAB format. The FuGE equivalent to ProtocolApplication is\n\t\t\t\tFuGE:ProtocolApplication, however input/output is modeled using\n\t\t\t\tEdge.\n\t\t\t\t<br/>\n\t\t\t\tThe ProtocolApplication class maps to FuGE/XGAP ProtocolApplication,\n\t\t\t\tbut in FuGE ProtocolApplications can take Material or Data (or both)\n\t\t\t\tas input and produce Material or Data (or both) as output. Similar\n\t\t\t\tto PaGE.ObservationMethod. Maps to METABASE:Visit (also note that\n\t\t\t\tMETABASE:PlannedVisit allows for planning of protocol applications;\n\t\t\t\tthis is outside scope for this model?).\n\t\t\t\n");
			protocolApplication_entity.setXrefLabels(Arrays.asList(new String[]{"name"}));
			Field protocolApplication_ontologyReference_field = new Field(protocolApplication_entity, "ontologyReference", MolgenisFieldTypes.getType("mref"));
			protocolApplication_ontologyReference_field.setDescription("(Optional) Reference to the formal ontology definition for this element, e.g. 'Animal' or 'GWAS protocol'");
			protocolApplication_ontologyReference_field.setNillable(true);
			protocolApplication_ontologyReference_field.setXRefVariables("OntologyTerm", "id",Arrays.asList(new String[]{"name"}));
			protocolApplication_entity.addField(protocolApplication_ontologyReference_field);
			Field protocolApplication_time_field = new Field(protocolApplication_entity, "time", MolgenisFieldTypes.getType("datetime"));
			protocolApplication_time_field.setAuto(true);
			protocolApplication_time_field.setDescription("time when the protocol was applied.");
			protocolApplication_time_field.setNillable(false);
			protocolApplication_entity.addField(protocolApplication_time_field);
			Field protocolApplication_protocol_field = new Field(protocolApplication_entity, "protocol", MolgenisFieldTypes.getType("xref"));
			protocolApplication_protocol_field.setDescription("Reference to the protocol that is being used.");
			protocolApplication_protocol_field.setNillable(true);
			protocolApplication_protocol_field.setXRefVariables("Protocol", "id",Arrays.asList(new String[]{"name"}));
			protocolApplication_entity.addField(protocolApplication_protocol_field);
			Field protocolApplication_performer_field = new Field(protocolApplication_entity, "Performer", MolgenisFieldTypes.getType("mref"));
			protocolApplication_performer_field.setDescription("Performer");
			protocolApplication_performer_field.setNillable(true);
			protocolApplication_performer_field.setXRefVariables("Person", "id",Arrays.asList(new String[]{"name"}));
			protocolApplication_entity.addField(protocolApplication_performer_field);
			Field protocolApplication_investigation_field = new Field(protocolApplication_entity, "Investigation", MolgenisFieldTypes.getType("xref"));
			protocolApplication_investigation_field.setDescription("Reference to the Study that this data element is part of");
			protocolApplication_investigation_field.setNillable(true);
			protocolApplication_investigation_field.setXRefVariables("Investigation", "id",Arrays.asList(new String[]{"name"}));
			protocolApplication_entity.addField(protocolApplication_investigation_field);
			Field protocolApplication_name_field = new Field(protocolApplication_entity, "name", MolgenisFieldTypes.getType("string"));
			protocolApplication_name_field.setDescription("human-readable name.");
			protocolApplication_name_field.setNillable(false);
			protocolApplication_entity.addField(protocolApplication_name_field);
			Field protocolApplication_id_field = new Field(protocolApplication_entity, "id", MolgenisFieldTypes.getType("int"));
			protocolApplication_id_field.setAuto(true);
			protocolApplication_id_field.setDescription("automatically generated id");
			protocolApplication_id_field.setNillable(false);
			protocolApplication_entity.addField(protocolApplication_id_field);
			Field protocolApplication_description_field = new Field(protocolApplication_entity, "description", MolgenisFieldTypes.getType("text"));
			protocolApplication_description_field.setDescription("description field");
			protocolApplication_description_field.setNillable(true);
			protocolApplication_entity.addField(protocolApplication_description_field);
			protocolApplication_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			protocolApplication_entity.addKey(Arrays.asList(new String[]{"name","Investigation"}),false,"");
			
			//Observation
			Entity observation_entity = new Entity("Observation",this.getDatabase());
			observation_entity.setSystem(false);
			observation_entity.setAbstract(true);
			observation_entity.setImplements(new String[]{"Identifiable"});
			observation_entity.setDescription("FIXME: change to ObservationTarget?\n");
			observation_entity.setXrefLabels(Arrays.asList(new String[]{"id"}));
			Field observation_investigation_field = new Field(observation_entity, "Investigation", MolgenisFieldTypes.getType("xref"));
			observation_investigation_field.setDescription("Investigation");
			observation_investigation_field.setNillable(true);
			observation_investigation_field.setXRefVariables("Investigation", "id",Arrays.asList(new String[]{"name"}));
			observation_entity.addField(observation_investigation_field);
			Field observation_protocolApplication_field = new Field(observation_entity, "protocolApplication", MolgenisFieldTypes.getType("xref"));
			observation_protocolApplication_field.setDescription("Reference to the protocol application that was used to produce this observation. For example a particular patient visit or the application of a microarray or the calculation of a QTL model");
			observation_protocolApplication_field.setNillable(true);
			observation_protocolApplication_field.setXRefVariables("ProtocolApplication", "id",Arrays.asList(new String[]{"name"}));
			observation_entity.addField(observation_protocolApplication_field);
			Field observation_feature_field = new Field(observation_entity, "Feature", MolgenisFieldTypes.getType("xref"));
			observation_feature_field.setDescription("References the ObservableFeature that this observation was made on. For example 'probe123'. Can be ommited for 1D data (i.e., a data list).");
			observation_feature_field.setNillable(false);
			observation_feature_field.setXRefVariables("ObservationElement", "id",Arrays.asList(new String[]{"name"}));
			observation_entity.addField(observation_feature_field);
			Field observation_target_field = new Field(observation_entity, "Target", MolgenisFieldTypes.getType("xref"));
			observation_target_field.setDescription("References the ObservationTarget that this feature was made on. For example 'individual1'. In a correlation matrix this could be also 'probe123'.");
			observation_target_field.setNillable(false);
			observation_target_field.setXRefVariables("ObservationElement", "id",Arrays.asList(new String[]{"name"}));
			observation_entity.addField(observation_target_field);
			Field observation_id_field = new Field(observation_entity, "id", MolgenisFieldTypes.getType("int"));
			observation_id_field.setAuto(true);
			observation_id_field.setDescription("automatically generated id");
			observation_id_field.setNillable(false);
			observation_entity.addField(observation_id_field);
			observation_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			
			//ObservedValue
			Entity observedValue_entity = new Entity("ObservedValue",this.getDatabase());
			observedValue_entity.setSystem(false);
			observedValue_entity.setAbstract(false);
			observedValue_entity.setImplements(new String[]{"Observation"});
			observedValue_entity.setDescription("\n\t\t\t\tGeneric storage of values, relationships and optional ontology\n\t\t\t\tmapping of the value/relation. Values can be atomatic observations,\n\t\t\t\te.g., length (feature) of individual 1 (target) = 179cm (value).\n\t\t\t\tValues can also be relationship values, e.g., extract (feature) of\n\t\t\t\tsample 1 (target) = derived sample (relation).\n\t\t\t\t<br/>\n\t\t\t\tDiscussion: how to model sample pooling in this model?\n\t\t\t\t<br/>\n\t\t\t\tMore Discussion: do we want to have type specific subclasses? No,\n\t\t\t\tbecause you can solve this by casting during querying?\n\t\t\t\n");
			observedValue_entity.setXrefLabels(Arrays.asList(new String[]{"id"}));
			Field observedValue_ontologyReference_field = new Field(observedValue_entity, "ontologyReference", MolgenisFieldTypes.getType("xref"));
			observedValue_ontologyReference_field.setDescription("(Optional) Reference to the     ontology definition or 'code' for this value (recommended for non-numeric     values such as codes)");
			observedValue_ontologyReference_field.setNillable(true);
			observedValue_ontologyReference_field.setXRefVariables("OntologyTerm", "id",Arrays.asList(new String[]{"name"}));
			observedValue_entity.addField(observedValue_ontologyReference_field);
			Field observedValue_value_field = new Field(observedValue_entity, "value", MolgenisFieldTypes.getType("string"));
			observedValue_value_field.setDescription("The value observed");
			observedValue_value_field.setNillable(true);
			observedValue_entity.addField(observedValue_value_field);
			Field observedValue_relation_field = new Field(observedValue_entity, "relation", MolgenisFieldTypes.getType("xref"));
			observedValue_relation_field.setDescription("Reference to other end of the relationship, if any. For example to a 'brother' or from 'sample' to 'derivedSample'.");
			observedValue_relation_field.setNillable(true);
			observedValue_relation_field.setXRefVariables("ObservationElement", "id",Arrays.asList(new String[]{"name"}));
			observedValue_entity.addField(observedValue_relation_field);
			Field observedValue_time_field = new Field(observedValue_entity, "time", MolgenisFieldTypes.getType("datetime"));
			observedValue_time_field.setDescription("(Optional) Time when the value was observed. For example in time series or if feature is time-dependent like 'age'");
			observedValue_time_field.setNillable(true);
			observedValue_entity.addField(observedValue_time_field);
			Field observedValue_endtime_field = new Field(observedValue_entity, "endtime", MolgenisFieldTypes.getType("datetime"));
			observedValue_endtime_field.setDescription("(Optional) Time when the value's validity ended");
			observedValue_endtime_field.setNillable(true);
			observedValue_entity.addField(observedValue_endtime_field);
			Field observedValue_investigation_field = new Field(observedValue_entity, "Investigation", MolgenisFieldTypes.getType("xref"));
			observedValue_investigation_field.setDescription("Investigation");
			observedValue_investigation_field.setNillable(true);
			observedValue_investigation_field.setXRefVariables("Investigation", "id",Arrays.asList(new String[]{"name"}));
			observedValue_entity.addField(observedValue_investigation_field);
			Field observedValue_protocolApplication_field = new Field(observedValue_entity, "protocolApplication", MolgenisFieldTypes.getType("xref"));
			observedValue_protocolApplication_field.setDescription("Reference to the protocol application that was used to produce this observation. For example a particular patient visit or the application of a microarray or the calculation of a QTL model");
			observedValue_protocolApplication_field.setNillable(true);
			observedValue_protocolApplication_field.setXRefVariables("ProtocolApplication", "id",Arrays.asList(new String[]{"name"}));
			observedValue_entity.addField(observedValue_protocolApplication_field);
			Field observedValue_feature_field = new Field(observedValue_entity, "Feature", MolgenisFieldTypes.getType("xref"));
			observedValue_feature_field.setDescription("References the ObservableFeature that this observation was made on. For example 'probe123'. Can be ommited for 1D data (i.e., a data list).");
			observedValue_feature_field.setNillable(false);
			observedValue_feature_field.setXRefVariables("ObservationElement", "id",Arrays.asList(new String[]{"name"}));
			observedValue_entity.addField(observedValue_feature_field);
			Field observedValue_target_field = new Field(observedValue_entity, "Target", MolgenisFieldTypes.getType("xref"));
			observedValue_target_field.setDescription("References the ObservationTarget that this feature was made on. For example 'individual1'. In a correlation matrix this could be also 'probe123'.");
			observedValue_target_field.setNillable(false);
			observedValue_target_field.setXRefVariables("ObservationElement", "id",Arrays.asList(new String[]{"name"}));
			observedValue_entity.addField(observedValue_target_field);
			Field observedValue_id_field = new Field(observedValue_entity, "id", MolgenisFieldTypes.getType("int"));
			observedValue_id_field.setAuto(true);
			observedValue_id_field.setDescription("automatically generated id");
			observedValue_id_field.setNillable(false);
			observedValue_entity.addField(observedValue_id_field);
			observedValue_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			
			//ProtocolDocument
			Entity protocolDocument_entity = new Entity("ProtocolDocument",this.getDatabase());
			protocolDocument_entity.setSystem(false);
			protocolDocument_entity.setAbstract(false);
			protocolDocument_entity.setParents(new String[]{"MolgenisFile"});
			protocolDocument_entity.setDescription("");
			protocolDocument_entity.setXrefLabels(Arrays.asList(new String[]{"name"}));
			Field protocolDocument_protocol_field = new Field(protocolDocument_entity, "protocol", MolgenisFieldTypes.getType("xref"));
			protocolDocument_protocol_field.setDescription("protocol");
			protocolDocument_protocol_field.setNillable(false);
			protocolDocument_protocol_field.setXRefVariables("Protocol", "id",Arrays.asList(new String[]{"name"}));
			protocolDocument_entity.addField(protocolDocument_protocol_field);
			Field protocolDocument_document_field = new Field(protocolDocument_entity, "document", MolgenisFieldTypes.getType("file"));
			protocolDocument_document_field.setDescription("document");
			protocolDocument_document_field.setNillable(false);
			protocolDocument_entity.addField(protocolDocument_document_field);
			Field protocolDocument_id_field = new Field(protocolDocument_entity, "id", MolgenisFieldTypes.getType("int"));
			protocolDocument_id_field.setAuto(true);
			protocolDocument_id_field.setDescription("automatically generated id");
			protocolDocument_id_field.setNillable(false);
			protocolDocument_entity.addField(protocolDocument_id_field);
			protocolDocument_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			
			//WorkflowElement
			Entity workflowElement_entity = new Entity("WorkflowElement",this.getDatabase());
			workflowElement_entity.setSystem(false);
			workflowElement_entity.setAbstract(false);
			workflowElement_entity.setImplements(new String[]{"Nameable"});
			workflowElement_entity.setDescription("Elements of a workflow are references to protocols. The\n\t\t\t\twhole workflow is a directed graph with each element pointing to the\n\t\t\t\tpreviousSteps that the current workflow element depends on.\n\t\t\t\n");
			workflowElement_entity.setXrefLabels(Arrays.asList(new String[]{"name"}));
			Field workflowElement_workflow_field = new Field(workflowElement_entity, "Workflow", MolgenisFieldTypes.getType("xref"));
			workflowElement_workflow_field.setDescription("Workflow this element is part of");
			workflowElement_workflow_field.setNillable(false);
			workflowElement_workflow_field.setXRefVariables("Workflow", "id",Arrays.asList(new String[]{"name"}));
			workflowElement_entity.addField(workflowElement_workflow_field);
			Field workflowElement_protocol_field = new Field(workflowElement_entity, "protocol", MolgenisFieldTypes.getType("xref"));
			workflowElement_protocol_field.setDescription("Protocol to be used at this workflow step");
			workflowElement_protocol_field.setNillable(false);
			workflowElement_protocol_field.setXRefVariables("Protocol", "id",Arrays.asList(new String[]{"name"}));
			workflowElement_entity.addField(workflowElement_protocol_field);
			Field workflowElement_previousSteps_field = new Field(workflowElement_entity, "PreviousSteps", MolgenisFieldTypes.getType("mref"));
			workflowElement_previousSteps_field.setDescription("Previous steps that need to be done before this protocol can be executed.");
			workflowElement_previousSteps_field.setNillable(true);
			workflowElement_previousSteps_field.setXRefVariables("WorkflowElement", "id",Arrays.asList(new String[]{"name"}));
			workflowElement_entity.addField(workflowElement_previousSteps_field);
			Field workflowElement_name_field = new Field(workflowElement_entity, "name", MolgenisFieldTypes.getType("string"));
			workflowElement_name_field.setDescription("human-readable name.");
			workflowElement_name_field.setNillable(false);
			workflowElement_entity.addField(workflowElement_name_field);
			Field workflowElement_id_field = new Field(workflowElement_entity, "id", MolgenisFieldTypes.getType("int"));
			workflowElement_id_field.setAuto(true);
			workflowElement_id_field.setDescription("automatically generated id");
			workflowElement_id_field.setNillable(false);
			workflowElement_entity.addField(workflowElement_id_field);
			workflowElement_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			workflowElement_entity.addKey(Arrays.asList(new String[]{"name"}),false,"");
			
			//WorkflowElementParameter
			Entity workflowElementParameter_entity = new Entity("WorkflowElementParameter",this.getDatabase());
			workflowElementParameter_entity.setSystem(false);
			workflowElementParameter_entity.setAbstract(false);
			workflowElementParameter_entity.setImplements(new String[]{"Identifiable"});
			workflowElementParameter_entity.setDescription("Element parameters are the way to link workflow elements\n\t\t\t\ttogether. It allows override of the parameters from the previous\n\t\t\t\tstep.\n\t\t\t\n");
			workflowElementParameter_entity.setXrefLabels(Arrays.asList(new String[]{"id"}));
			Field workflowElementParameter_workflowElement_field = new Field(workflowElementParameter_entity, "WorkflowElement", MolgenisFieldTypes.getType("xref"));
			workflowElementParameter_workflowElement_field.setDescription("To attach a parameter to a WorkflowElement");
			workflowElementParameter_workflowElement_field.setNillable(false);
			workflowElementParameter_workflowElement_field.setXRefVariables("WorkflowElement", "id",Arrays.asList(new String[]{"name"}));
			workflowElementParameter_entity.addField(workflowElementParameter_workflowElement_field);
			Field workflowElementParameter_parameter_field = new Field(workflowElementParameter_entity, "Parameter", MolgenisFieldTypes.getType("xref"));
			workflowElementParameter_parameter_field.setDescription("Parameter definition.");
			workflowElementParameter_parameter_field.setNillable(false);
			workflowElementParameter_parameter_field.setXRefVariables("ObservableFeature", "id",Arrays.asList(new String[]{"name"}));
			workflowElementParameter_entity.addField(workflowElementParameter_parameter_field);
			Field workflowElementParameter_value_field = new Field(workflowElementParameter_entity, "Value", MolgenisFieldTypes.getType("string"));
			workflowElementParameter_value_field.setDescription("Value of this parameter. Can be a template of form ${other} refering to previous values in context.");
			workflowElementParameter_value_field.setNillable(false);
			workflowElementParameter_entity.addField(workflowElementParameter_value_field);
			Field workflowElementParameter_id_field = new Field(workflowElementParameter_entity, "id", MolgenisFieldTypes.getType("int"));
			workflowElementParameter_id_field.setAuto(true);
			workflowElementParameter_id_field.setDescription("automatically generated id");
			workflowElementParameter_id_field.setNillable(false);
			workflowElementParameter_entity.addField(workflowElementParameter_id_field);
			workflowElementParameter_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			workflowElementParameter_entity.addKey(Arrays.asList(new String[]{"WorkflowElement","Parameter"}),false,"");
			
			//MolgenisRoleGroupLink
			Entity molgenisRoleGroupLink_entity = new Entity("MolgenisRoleGroupLink",this.getDatabase());
			molgenisRoleGroupLink_entity.setSystem(true);
			molgenisRoleGroupLink_entity.setAbstract(false);
			molgenisRoleGroupLink_entity.setImplements(new String[]{"Identifiable"});
			molgenisRoleGroupLink_entity.setDescription("");
			molgenisRoleGroupLink_entity.setXrefLabels(Arrays.asList(new String[]{"id"}));
			Field molgenisRoleGroupLink_group__field = new Field(molgenisRoleGroupLink_entity, "group_", MolgenisFieldTypes.getType("xref"));
			molgenisRoleGroupLink_group__field.setDescription("group_");
			molgenisRoleGroupLink_group__field.setNillable(false);
			molgenisRoleGroupLink_group__field.setXRefVariables("MolgenisGroup", "id",Arrays.asList(new String[]{"name"}));
			molgenisRoleGroupLink_entity.addField(molgenisRoleGroupLink_group__field);
			Field molgenisRoleGroupLink_role__field = new Field(molgenisRoleGroupLink_entity, "role_", MolgenisFieldTypes.getType("xref"));
			molgenisRoleGroupLink_role__field.setDescription("role_");
			molgenisRoleGroupLink_role__field.setNillable(false);
			molgenisRoleGroupLink_role__field.setXRefVariables("MolgenisRole", "id",Arrays.asList(new String[]{"name"}));
			molgenisRoleGroupLink_entity.addField(molgenisRoleGroupLink_role__field);
			Field molgenisRoleGroupLink_id_field = new Field(molgenisRoleGroupLink_entity, "id", MolgenisFieldTypes.getType("int"));
			molgenisRoleGroupLink_id_field.setAuto(true);
			molgenisRoleGroupLink_id_field.setDescription("automatically generated id");
			molgenisRoleGroupLink_id_field.setNillable(false);
			molgenisRoleGroupLink_entity.addField(molgenisRoleGroupLink_id_field);
			molgenisRoleGroupLink_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			molgenisRoleGroupLink_entity.addKey(Arrays.asList(new String[]{"group_","role_"}),false,"");
			
			//MolgenisPermission
			Entity molgenisPermission_entity = new Entity("MolgenisPermission",this.getDatabase());
			molgenisPermission_entity.setSystem(true);
			molgenisPermission_entity.setAbstract(false);
			molgenisPermission_entity.setImplements(new String[]{"Identifiable"});
			molgenisPermission_entity.setDescription("");
			molgenisPermission_entity.setXrefLabels(Arrays.asList(new String[]{"id"}));
			Field molgenisPermission_role__field = new Field(molgenisPermission_entity, "role_", MolgenisFieldTypes.getType("xref"));
			molgenisPermission_role__field.setDescription("role_");
			molgenisPermission_role__field.setNillable(false);
			molgenisPermission_role__field.setXRefVariables("MolgenisRole", "id",Arrays.asList(new String[]{"name"}));
			molgenisPermission_entity.addField(molgenisPermission_role__field);
			Field molgenisPermission_entity_field = new Field(molgenisPermission_entity, "entity", MolgenisFieldTypes.getType("xref"));
			molgenisPermission_entity_field.setDescription("entity");
			molgenisPermission_entity_field.setNillable(false);
			molgenisPermission_entity_field.setXRefVariables("MolgenisEntity", "id",Arrays.asList(new String[]{"className"}));
			molgenisPermission_entity.addField(molgenisPermission_entity_field);
			Field molgenisPermission_permission_field = new Field(molgenisPermission_entity, "permission", MolgenisFieldTypes.getType("enum"));
			Vector<String> molgenisPermission_permission_field_enumoptions = new Vector<String>();
			molgenisPermission_permission_field_enumoptions.add("read");
			molgenisPermission_permission_field_enumoptions.add("write");
			molgenisPermission_permission_field_enumoptions.add("own");
			molgenisPermission_permission_field.setEnumOptions(molgenisPermission_permission_field_enumoptions);
			molgenisPermission_permission_field.setDescription("permission");
			molgenisPermission_permission_field.setNillable(false);
			molgenisPermission_entity.addField(molgenisPermission_permission_field);
			Field molgenisPermission_id_field = new Field(molgenisPermission_entity, "id", MolgenisFieldTypes.getType("int"));
			molgenisPermission_id_field.setAuto(true);
			molgenisPermission_id_field.setDescription("automatically generated id");
			molgenisPermission_id_field.setNillable(false);
			molgenisPermission_entity.addField(molgenisPermission_id_field);
			molgenisPermission_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			molgenisPermission_entity.addKey(Arrays.asList(new String[]{"role_","entity","permission"}),false,"");
			
			//Authorizable
			Entity authorizable_entity = new Entity("Authorizable",this.getDatabase());
			authorizable_entity.setSystem(false);
			authorizable_entity.setAbstract(true);
			authorizable_entity.setDescription("Interface for row level security\n");
			Field authorizable_canRead_field = new Field(authorizable_entity, "canRead", MolgenisFieldTypes.getType("xref"));
			authorizable_canRead_field.setDescription("canRead");
			authorizable_canRead_field.setNillable(true);
			authorizable_canRead_field.setXRefVariables("MolgenisRole", "id",Arrays.asList(new String[]{"name"}));
			authorizable_entity.addField(authorizable_canRead_field);
			Field authorizable_canWrite_field = new Field(authorizable_entity, "canWrite", MolgenisFieldTypes.getType("xref"));
			authorizable_canWrite_field.setDescription("canWrite");
			authorizable_canWrite_field.setNillable(true);
			authorizable_canWrite_field.setXRefVariables("MolgenisRole", "id",Arrays.asList(new String[]{"name"}));
			authorizable_entity.addField(authorizable_canWrite_field);
			Field authorizable_owns_field = new Field(authorizable_entity, "owns", MolgenisFieldTypes.getType("xref"));
			authorizable_owns_field.setDescription("owns");
			authorizable_owns_field.setNillable(false);
			authorizable_owns_field.setXRefVariables("MolgenisRole", "id",Arrays.asList(new String[]{"name"}));
			authorizable_entity.addField(authorizable_owns_field);
			
			
			//disabled validation, this means above must be perfect!
			//new MolgenisModelValidator();
			//MolgenisModelValidator.validate(this, new MolgenisOptions());

		} catch (MolgenisModelException e)
		{
			throw new DatabaseException(e);
		}
	}
}